import os
import re

from datetime import date


def camel_case(text):
    components = text.split(' ')
    return components[0].lower() + "".join(x.capitalize() for x in components[1:])


def kebab_case(text):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1-\2', camel_case(text))
    return re.sub('([a-z0-9])([A-Z])', r'\1-\2', s1).lower()


def create_directory(path):
    print ("Creating directory \'" + path + "\'...")
    if not os.path.exists(path):
        os.makedirs(path)


def create_gitignore():
    print ("Creating .gitignore...")
    filename = os.path.join(os.getcwd(), path, ".gitignore")
    with open(filename, "w") as output_file:
        output_file.write("""# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules"
"jspm_packages

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Credentials
credentials.json
credentials.js

# Intellij based IDEs
.idea""")
        output_file.close()


def create_license():
    print ("Creating LICENSE...")
    filename = os.path.join(os.getcwd(), path, "LICENSE")
    with open(filename, "w") as output_file:
        output_file.write("""The MIT License (MIT)

Copyright (c) """ + str(date.today().year) + """ """ + creator_name + """

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
""")
        output_file.close()


def create_serverjs():
    print ("Creating server.js...")
    filename = os.path.join(os.getcwd(), path, "server.js")
    with open(filename, "w") as output_file:
        output_file.write("""var express = require("express");
var os = require('os');
const path = require('path');

var app = express();

var port = process.env.PORT || 3000;
// var database = process.env.DATABASE || db;
// console.log("Database: " + database);
/*
 To set a port other than 3000:
 in Unix:

 $ PORT=1234 node server.js

 in Windows:

 set PORT=1234
 node server.js
 */

var ifaces = os.networkInterfaces();

Object.keys(ifaces).forEach(function (ifname) {
    var alias = 0;

    ifaces[ifname].forEach(function (iface) {
        if ('IPv4' !== iface.family || iface.internal !== false) {
            // skip over internal (i.e. 127.0.0.1) and non-ipv4 addresses
            return;
        }

        if (alias >= 1) {
            // this single interface has multiple ipv4 addresses
            console.log(ifname + ':' + alias, iface.address);
        } else {
            // this interface has only one ipv4 adress
            console.log(ifname, iface.address);
        }
        ++alias;
    });
});

app.use("/server.js",function (req, res, next) {
    res.redirect("/")
});

app.use(express.static(path.join(__dirname, "app")));


app.all('*', function (req, res) {
    res.redirect("/");
});

app.listen(port, function () {
    console.log('listening on port ' + port);
    // console.log('press Ctrl + C to shut down server');
});""")
        output_file.close()


def create_readmemd():
    print ("Creating README.md...")
    filename = os.path.join(os.getcwd(), path, "README.md")
    with open(filename, "w") as output_file:
        output_file.write("# " + project_name + "\n" + project_description)
        output_file.close()


def create_packagejson():
    print ("Creating package.json...")
    filename = os.path.join(os.getcwd(), path, "package.json")
    with open(filename, "w") as output_file:
        output_file.write("""{
  \"name\": \"""" + kebab_case(project_name) + "\",\n")
        output_file.write("""  \"version\": \"1.0.0\",
  \"description\": \"""" + project_description + "\",\n")
        output_file.write("""  \"main\": \"server.js\",
  \"scripts\": {
    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",
    \"start\": \"node server.js\"
  },\n""")

        if has_github_url:
            output_file.write("""  \"repository\": {
    \"type\": \"git\",
    \"url\": \"git+""" + github_url + """.git\"
  },\n""")

        output_file.write("""  \"author\": \"""" + creator_name + """\",
  "license": "MIT",\n""")

        if has_github_url:
            output_file.write("""  \"bugs\": {
    \"url\": \"""" + github_url + """/issues\"
  },\n""")
            output_file.write("""  \"homepage\": \"""" + github_url + """#readme\",\n""")

        output_file.write("""  \"dependencies\": {
    \"express\": \"^4.14.0\"
  }
}""")

        output_file.close()


def create_indexhtml():
    print ("Creating index.html...")
    filename = os.path.join(os.getcwd(), app_path, "index.html")
    with open(filename, "w") as output_file:
        output_file.write("""<!doctype html>
<html lang="en" data-ng-app=\""""+camel_case(project_name)+"""App\">
<head>
    <meta charset="utf-8">
    <base href="/">
    <title>""" + project_name + """</title>
    <!--<link rel="shortcut icon" type="image/png" href="Favicon.png"/>-->

    <meta property="og:title" content=\"""" + project_name + """\"/>
    <meta property="og:description" content=\"""" + project_description + """\"/>
    <meta property="og:image" content="PREVIEW_IMAGE_URL"/>

    <!--JQuery-->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>

    <!--Bootstrap-->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>

    <!-- Material Design fonts -->
    <link rel="stylesheet" href="//fonts.googleapis.com/css?family=Roboto:300,400,500,700" type="text/css">
    <link href="//fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <!-- Bootstrap Material Design -->
    <link href="CSS/bootstrap-material-design.min.css" rel="stylesheet">
    <link href="CSS/ripples.min.css" rel="stylesheet">
    <script src="JS/material.min.js"></script>
    <script src="JS/ripples.min.js"></script>

    <!-- Dropdown.js -->
    <link href="//cdn.rawgit.com/FezVrasta/dropdown.js/master/jquery.dropdown.css" rel="stylesheet">

    <!--Custom css-->
    <link rel="stylesheet" href="CSS/style.css">

    <!--AngularJS-->
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.7/angular.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.7/angular-route.min.js"></script>
""")
        if firebase_boilerplate:
            output_file.write("""
    <!-- Firebase -->
    <script src="https://www.gstatic.com/firebasejs/3.1.0/firebase.js"></script>
    <script>
        // Initialize Firebase
        var config = {
            apiKey: "YOUR_APIKEY",
            authDomain: "YOUR_AUTH_DOMAIN",
            databaseURL: "YOUR_DATABASE_URL",
            storageBucket: "YOUR_STORAGE_BUCKET",
        };
        firebase.initializeApp(config);
    </script>

    <!-- AngularFire -->
    <script src="https://cdn.firebase.com/libs/angularfire/2.0.0/angularfire.min.js"></script>
""")

        output_file.write("""

    <!--Modules-->

    <!--main 'app' module-->
    <script src="app.module.js"></script>
    <script src="app.config.js"></script>
""")

        if add_navbar:
            output_file.write("""
    <!--'nav-bar' module-->
    <script src="nav-bar/nav-bar.module.js"></script>
    <script src="nav-bar/nav-bar.component.js"></script>
""")
        if add_about:
            output_file.write("""
    <!--'about' module-->
    <script src="about/about.module.js"></script>
    <script src="about/about.component.js"></script>
""")

        for module in modules:
            kmodule = kebab_case(module)
            output_file.write("""
    <!--'""" + kmodule + """' module-->
    <script src=\"""" + kmodule + "/" + kmodule + """.module.js"></script>
    <script src=\"""" + kmodule + "/" + kmodule + """.component.js"></script>
""")
        output_file.write("""
</head>
<body>

<a href="/""" + kebab_case(home_module) + """\">
    <div class="jumbotron heading">
        <h1 class="heading">""" + project_name + """</h1>
    </div>
</a>
""")
        if add_navbar:
            output_file.write("\n<nav-bar></nav-bar>\n")
        output_file.write("""
<div data-ng-view></div>

<br>
<br>

</body>
</html>

""")
        output_file.close()


print ("""This generator will create the base of your
Node.js + Express + Angular 1 project\n""")

print ("""Note: when entering a module name or the project name,
use words separated by spaces.
Case conversion will take place automatically.""")

creator_name = raw_input("\nEnter project creator name:\n")

project_name = raw_input("\nEnter project name:\n")

project_description = raw_input("\nEnter project description:\n")

# Asking about GitHub repo
choice = raw_input("Specify github repository? [y/N]:")
choice = choice.lower()
has_github_url = (choice == "y") or (choice == "yes")

if has_github_url:
    print("\nEnter github repository url in the format: \n")
    github_url = raw_input("https://github.com/user-name/repository-name\n")

choice = raw_input("Add Firebase presets? [y/N]: ")
choice = choice.lower()
firebase_boilerplate = (choice == "y") or (choice == "yes")

modules = []
i = 0

home_module = raw_input("\nEnter name of home module (Default: 'home'):\n")
if home_module == "":
    home_module = "home"


choice = raw_input("Add more modules? (Current number of modules: " + str(1) + ") [y/N]: ")
choice = choice.lower()
add_modules = (choice == "y") or (choice == "yes")

while add_modules:
    module_name = ""
    while module_name == "":
        module_name = raw_input("\nEnter module name:\n")
    if not modules.__contains__(module_name):
        modules.append(module_name)
    choice = raw_input("Add more modules? (Current number of modules: " + str(len(modules) + 1) + ") [y/N]: ")
    choice = choice.lower()
    add_modules = (choice == "y") or (choice == "yes")

choice = raw_input("\nAdd 'about' module? (Current number of modules: " + str(len(modules) + 1) + ") [Y/n]: ")
choice = choice.lower()
add_about = not ((choice == "n") or (choice == "no"))

choice = raw_input("\nAdd 'nav-bar' module? [Y/n]: ")
choice = choice.lower()
add_navbar = not ((choice == "n") or (choice == "no"))

print modules

path = kebab_case(project_name)
app_path = os.path.join(path, "app")
assets_path = os.path.join(path, "assets")

print ("\n")
create_directory(path)
create_gitignore()
create_license()
create_packagejson()
create_readmemd()
create_serverjs()

create_directory(app_path)
create_directory(assets_path)

create_indexhtml()

print("\nFinished\n\nDon't forget to run npm install from within the project directory")
